/****************************************************************************
  Author:  Karelin Pavel (hkarel), hkarel@yandex.ru

  В модуле реализованы базовый класс для управления жизнью объекта с использо-
  ванием внутреннего счетчика ссылок. Предполагается, что классы унаследованные
  от clife_base будут использоваться совместно со смарт-указателем clife_ptr.
****************************************************************************/

#pragma once
#include <atomic>

struct clife_base
{
    // Если предполагается, что основная работа с объектом clife_base будет
    // осуществляться через clife_ptr<>(), то в этом случае при создании
    // объекта clife_base предпочтительно счетчик жизни объекта выставлять в 0.
    // При работе через clife_ptr<>() счетчик жизни объекта будет увеличен
    // в конструкторе clife_ptr<>().
    // Если же при создании объекта clife_base не планируется его немедленная
    // передача во владение clife_ptr<>(), то целесообразно счетчик жизни выстав-
    // лять в 1. В этом случае в коде будет меньше вызовов метода add_ref().
    clife_base() : clife_count(0) {}
    clife_base(bool add_ref) : clife_count(add_ref ? 1 : 0) {}
    virtual ~clife_base() = default;

    inline void add_ref() const {++clife_count;}
    inline void release() const {if (--clife_count == 0) delete this;}

    mutable std::atomic<uint32_t> clife_count;
};
